// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Проверка вкладки "SURF детектор"
        /// </summary>
        public void FirstTab()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UISURFexeListItem.UINameEdit;
            WpfButton uIItemButton = this.UISURFдетекторWindow.UIItemTabList.UISURFдетекторTabPage.UIItemButton;
            WinListItem uIUftiuygjpgListItem = this.UIOpenWindow.UIItemWindow.UIItemsViewList.UIUftiuygjpgListItem;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(0, 18));

            // Click '...' button
            Mouse.Click(uIItemButton, new Point(20, 19));

            // Move 'uftiuyg.jpg' list item
            Mouse.StartDragging(uIUftiuygjpgListItem, new Point(59, 159));
            Mouse.StopDragging(uIUftiuygjpgListItem, 11, -67);

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(32, 25));

            // Last mouse action was not recorded.
        }
        
        /// <summary>
        /// AssertMethod1
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfEdit uITxt_add_surfEdit = this.UISURFдетекторWindow.UIItemTabList.UISURFдетекторTabPage.UITxt_add_surfEdit;
            #endregion

            // Verify that the 'Text' property of 'txt_add_surf' text box is not equal to 'null'
            Assert.IsNotNull(uITxt_add_surfEdit.Text);
        }
        
        /// <summary>
        /// Проверка вкладки "Визуальные объекты для поиска"
        /// </summary>
        public void SecondTab()
        {
            #region Variable Declarations
            WpfTabPage uIВизуальныеобъектыдляTabPage = this.UISURFдетекторWindow.UIItemTabList.UIВизуальныеобъектыдляTabPage;
            WpfButton uIItemButton = this.UISURFдетекторWindow.UIItemTabList.UIВизуальныеобъектыдляTabPage.UIItemButton;
            WinListItem uIFordlogopngListItem = this.UIOpenWindow.UIItemWindow.UIItemsViewList.UIFordlogopngListItem;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WpfButton uIItemButton1 = this.UISURFдетекторWindow.UIItemTabList.UIВизуальныеобъектыдляTabPage.UIItemButton1;
            WinListItem uIVwlogosmalljpgListItem = this.UIOpenWindow.UIItemWindow.UIItemsViewList.UIVwlogosmalljpgListItem;
            WinSplitButton uIOpenSplitButton1 = this.UIOpenWindow.UIOpenWindow2.UIOpenSplitButton;
            WpfButton uIItemButton2 = this.UISURFдетекторWindow.UIItemTabList.UIВизуальныеобъектыдляTabPage.UIItemButton2;
            WinListItem uIHyundaiLogopngListItem = this.UIOpenWindow.UIItemWindow.UIItemsViewList.UIHyundaiLogopngListItem;
            WinSplitButton uIOpenSplitButton2 = this.UIOpenWindow.UIOpenWindow3.UIOpenSplitButton;
            #endregion

            // Click 'Визуальные объекты для поиска' tab
            Mouse.Click(uIВизуальныеобъектыдляTabPage, new Point(132, 10));

            // Click '...' button
            Mouse.Click(uIItemButton, new Point(3, 15));

            // Click 'ford-logo.png' list item
            Mouse.Click(uIFordlogopngListItem, new Point(67, 98));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(38, 19));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(32, 10));

            // Click 'vw-logo-small.jpg' list item
            Mouse.Click(uIVwlogosmalljpgListItem, new Point(84, 84));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton1, new Point(48, 16));

            // Click '...' button
            Mouse.Click(uIItemButton2, new Point(19, 19));

            // Click 'Hyundai-Logo.png' list item
            Mouse.Click(uIHyundaiLogopngListItem, new Point(72, 59));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton2, new Point(25, 14));
        }
        
        /// <summary>
        /// AssertMethod2
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WpfEdit uITxt_1Edit = this.UISURFдетекторWindow.UIItemTabList.UIВизуальныеобъектыдляTabPage.UITxt_1Edit;
            WpfEdit uITxt_2Edit = this.UISURFдетекторWindow.UIItemTabList.UIВизуальныеобъектыдляTabPage.UITxt_2Edit;
            WpfEdit uITxt_3Edit = this.UISURFдетекторWindow.UIItemTabList.UIВизуальныеобъектыдляTabPage.UITxt_3Edit;
            #endregion

            // Verify that the 'Text' property of 'txt_1' text box is not equal to 'null'
            Assert.IsNotNull(uITxt_1Edit.Text);

            // Verify that the 'Text' property of 'txt_2' text box is not equal to 'null'
            Assert.IsNotNull(uITxt_2Edit.Text);

            // Verify that the 'Text' property of 'txt_3' text box is not equal to 'null'
            Assert.IsNotNull(uITxt_3Edit.Text);
        }
        
        /// <summary>
        /// Проверка вкладки "Результаты"
        /// </summary>
        public void ThirdTab()
        {
            #region Variable Declarations
            WpfTabPage uIРезультатыTabPage = this.UISURFдетекторWindow.UIItemTabList.UIРезультатыTabPage;
            WpfButton uIОтобразитьрезультатыButton = this.UISURFдетекторWindow.UIItemTabList.UIРезультатыTabPage.UIОтобразитьрезультатыButton;
            #endregion

            // Click 'Результаты' tab
            Mouse.Click(uIРезультатыTabPage, new Point(35, 7));

            // Click 'Отобразить результаты' button
            Mouse.Click(uIОтобразитьрезультатыButton, new Point(108, 39));

            // Click 'Результаты' tab
            Mouse.Click(uIРезультатыTabPage, new Point(-33, 244));
        }
        
        /// <summary>
        /// Проверка вкладки "О программе"
        /// </summary>
        public void FourthTab()
        {
            #region Variable Declarations
            WpfTabPage uIОпрограммеTabPage = this.UISURFдетекторWindow.UIItemTabList.UIОпрограммеTabPage;
            WpfButton uICloseButton = this.UISURFдетекторWindow.UISURFдетекторTitleBar.UICloseButton;
            #endregion

            // Click 'О программе' tab
            Mouse.Click(uIОпрограммеTabPage, new Point(65, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 13));
        }
        
        #region Properties
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UISURFдетекторWindow UISURFдетекторWindow
        {
            get
            {
                if ((this.mUISURFдетекторWindow == null))
                {
                    this.mUISURFдетекторWindow = new UISURFдетекторWindow();
                }
                return this.mUISURFдетекторWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugWindow mUIDebugWindow;
        
        private UISURFдетекторWindow mUISURFдетекторWindow;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UISURFexeListItem UISURFexeListItem
        {
            get
            {
                if ((this.mUISURFexeListItem == null))
                {
                    this.mUISURFexeListItem = new UISURFexeListItem(this);
                }
                return this.mUISURFexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISURFexeListItem mUISURFexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISURFexeListItem : WinListItem
    {
        
        public UISURFexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SURF.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISURFдетекторWindow : WpfWindow
    {
        
        public UISURFдетекторWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SURF детектор";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SURF детектор");
            #endregion
        }
        
        #region Properties
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public UISURFдетекторTitleBar UISURFдетекторTitleBar
        {
            get
            {
                if ((this.mUISURFдетекторTitleBar == null))
                {
                    this.mUISURFдетекторTitleBar = new UISURFдетекторTitleBar(this);
                }
                return this.mUISURFдетекторTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList mUIItemTabList;
        
        private UISURFдетекторTitleBar mUISURFдетекторTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("SURF детектор");
            #endregion
        }
        
        #region Properties
        public UISURFдетекторTabPage UISURFдетекторTabPage
        {
            get
            {
                if ((this.mUISURFдетекторTabPage == null))
                {
                    this.mUISURFдетекторTabPage = new UISURFдетекторTabPage(this);
                }
                return this.mUISURFдетекторTabPage;
            }
        }
        
        public UIВизуальныеобъектыдляTabPage UIВизуальныеобъектыдляTabPage
        {
            get
            {
                if ((this.mUIВизуальныеобъектыдляTabPage == null))
                {
                    this.mUIВизуальныеобъектыдляTabPage = new UIВизуальныеобъектыдляTabPage(this);
                }
                return this.mUIВизуальныеобъектыдляTabPage;
            }
        }
        
        public UIРезультатыTabPage UIРезультатыTabPage
        {
            get
            {
                if ((this.mUIРезультатыTabPage == null))
                {
                    this.mUIРезультатыTabPage = new UIРезультатыTabPage(this);
                }
                return this.mUIРезультатыTabPage;
            }
        }
        
        public WpfTabPage UIОпрограммеTabPage
        {
            get
            {
                if ((this.mUIОпрограммеTabPage == null))
                {
                    this.mUIОпрограммеTabPage = new WpfTabPage(this);
                    #region Search Criteria
                    this.mUIОпрограммеTabPage.SearchProperties[WpfTabPage.PropertyNames.Name] = "О программе";
                    this.mUIОпрограммеTabPage.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUIОпрограммеTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UISURFдетекторTabPage mUISURFдетекторTabPage;
        
        private UIВизуальныеобъектыдляTabPage mUIВизуальныеобъектыдляTabPage;
        
        private UIРезультатыTabPage mUIРезультатыTabPage;
        
        private WpfTabPage mUIОпрограммеTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISURFдетекторTabPage : WpfTabPage
    {
        
        public UISURFдетекторTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "SURF детектор";
            this.WindowTitles.Add("SURF детектор");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btn_add_surf";
                    this.mUIItemButton.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfEdit UITxt_add_surfEdit
        {
            get
            {
                if ((this.mUITxt_add_surfEdit == null))
                {
                    this.mUITxt_add_surfEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxt_add_surfEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txt_add_surf";
                    this.mUITxt_add_surfEdit.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUITxt_add_surfEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private WpfEdit mUITxt_add_surfEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIВизуальныеобъектыдляTabPage : WpfTabPage
    {
        
        public UIВизуальныеобъектыдляTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Визуальные объекты для поиска";
            this.WindowTitles.Add("SURF детектор");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btn_1";
                    this.mUIItemButton.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btn_2";
                    this.mUIItemButton1.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        
        public WpfButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton2.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btn_3";
                    this.mUIItemButton2.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUIItemButton2;
            }
        }
        
        public WpfEdit UITxt_1Edit
        {
            get
            {
                if ((this.mUITxt_1Edit == null))
                {
                    this.mUITxt_1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxt_1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txt_1";
                    this.mUITxt_1Edit.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUITxt_1Edit;
            }
        }
        
        public WpfEdit UITxt_2Edit
        {
            get
            {
                if ((this.mUITxt_2Edit == null))
                {
                    this.mUITxt_2Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxt_2Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txt_2";
                    this.mUITxt_2Edit.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUITxt_2Edit;
            }
        }
        
        public WpfEdit UITxt_3Edit
        {
            get
            {
                if ((this.mUITxt_3Edit == null))
                {
                    this.mUITxt_3Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxt_3Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txt_3";
                    this.mUITxt_3Edit.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUITxt_3Edit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        
        private WpfButton mUIItemButton2;
        
        private WpfEdit mUITxt_1Edit;
        
        private WpfEdit mUITxt_2Edit;
        
        private WpfEdit mUITxt_3Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIРезультатыTabPage : WpfTabPage
    {
        
        public UIРезультатыTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Результаты";
            this.WindowTitles.Add("SURF детектор");
            #endregion
        }
        
        #region Properties
        public WpfButton UIОтобразитьрезультатыButton
        {
            get
            {
                if ((this.mUIОтобразитьрезультатыButton == null))
                {
                    this.mUIОтобразитьрезультатыButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIОтобразитьрезультатыButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btn_result";
                    this.mUIОтобразитьрезультатыButton.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUIОтобразитьрезультатыButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIОтобразитьрезультатыButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISURFдетекторTitleBar : WpfTitleBar
    {
        
        public UISURFдетекторTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("SURF детектор");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("SURF детектор");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow2
        {
            get
            {
                if ((this.mUIOpenWindow2 == null))
                {
                    this.mUIOpenWindow2 = new UIOpenWindow2(this);
                }
                return this.mUIOpenWindow2;
            }
        }
        
        public UIOpenWindow3 UIOpenWindow3
        {
            get
            {
                if ((this.mUIOpenWindow3 == null))
                {
                    this.mUIOpenWindow3 = new UIOpenWindow3(this);
                }
                return this.mUIOpenWindow3;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIOpenWindow2 mUIOpenWindow2;
        
        private UIOpenWindow3 mUIOpenWindow3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemsViewList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList(this);
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemsViewList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemsViewList : WinList
    {
        
        public UIItemsViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UIUftiuygjpgListItem
        {
            get
            {
                if ((this.mUIUftiuygjpgListItem == null))
                {
                    this.mUIUftiuygjpgListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIUftiuygjpgListItem.SearchProperties[WinListItem.PropertyNames.Name] = "uftiuyg.jpg";
                    this.mUIUftiuygjpgListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIUftiuygjpgListItem;
            }
        }
        
        public WinListItem UIFordlogopngListItem
        {
            get
            {
                if ((this.mUIFordlogopngListItem == null))
                {
                    this.mUIFordlogopngListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIFordlogopngListItem.SearchProperties[WinListItem.PropertyNames.Name] = "ford-logo.png";
                    this.mUIFordlogopngListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFordlogopngListItem;
            }
        }
        
        public WinListItem UIVwlogosmalljpgListItem
        {
            get
            {
                if ((this.mUIVwlogosmalljpgListItem == null))
                {
                    this.mUIVwlogosmalljpgListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIVwlogosmalljpgListItem.SearchProperties[WinListItem.PropertyNames.Name] = "vw-logo-small.jpg";
                    this.mUIVwlogosmalljpgListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIVwlogosmalljpgListItem;
            }
        }
        
        public WinListItem UIHyundaiLogopngListItem
        {
            get
            {
                if ((this.mUIHyundaiLogopngListItem == null))
                {
                    this.mUIHyundaiLogopngListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIHyundaiLogopngListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Hyundai-Logo.png";
                    this.mUIHyundaiLogopngListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIHyundaiLogopngListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIUftiuygjpgListItem;
        
        private WinListItem mUIFordlogopngListItem;
        
        private WinListItem mUIVwlogosmalljpgListItem;
        
        private WinListItem mUIHyundaiLogopngListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow3 : WinWindow
    {
        
        public UIOpenWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
}
